#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from pcl_helper import *
from filtering_helper import *

from sensor_msgs.msg import PointCloud, PointCloud2, PointField
from geometry_msgs.msg import Twist, Pose, PoseArray
from sensor_msgs import point_cloud2

import struct
import matplotlib.pyplot as plt
import numpy as np

from std_msgs.msg import Float64MultiArray
from scipy.spatial import ConvexHull
import matplotlib.patches as patches
from mpl_toolkits.mplot3d import Axes3D 

import math
from datetime import datetime, timedelta
import time
import rospy
import pcl


time_delta = .1


class Clustering_Shaping:
    def __init__(self):
        self.full_timer = datetime.now()
        print("entered init of clustering")

        # ROS node initialization
        rospy.init_node('clustering', anonymous=True)

        rospy.Subscriber("/livox/lidar", PointCloud2, self.pcl_callback, queue_size=50)

        # Publishers
        self.clusters_publisher = rospy.Publisher("/pcl_cluster", PointCloud2, queue_size=10)
        self.wrapped_obj_pub = rospy.Publisher("WrappedObjs", PoseArray, queue_size=10)
        self.num_clusters_pub = rospy.Publisher("num_clusters", Twist, queue_size=10)

        self.filtered_pub = rospy.Publisher("/filtered_cloud", PointCloud2, queue_size=10)
        


        self.init_time = datetime.now()

        # Cache clustering results
        self.cached_cluster_indices = []
        self.cached_clusters = []
        self.cached_colored_points = []

        

        # Initialize color_list
        get_color_list.color_list = []

    # --------------------------------------------------------------------------
    # Filtering pipeline
    # --------------------------------------------------------------------------
    def filtering(self, cloud):
        filtering_time = datetime.now()
        x_limit = 1
        x_limit_low = 0
        y_limit = 1.2
        y_limitlow = 0

         #remove the floor
        z_floor = 1.1        # sensor height (m)

        min_body_radius = .25
      

        # Downsample the cloud to lower resolution to make algo run faster
        downsampled_cloud = do_voxel_grid_filter(point_cloud=cloud, LEAF_SIZE=0.01)

        objects_cloud = []
        for i in range(downsampled_cloud.size):
            if x_limit_low < downsampled_cloud[i][0] < x_limit and abs(downsampled_cloud[i][1]) < y_limit:
                x_point_cl=downsampled_cloud[i][0]
                y_point_cl=downsampled_cloud[i][1]

                ## Filter out Ground Postion 
                if not ((abs(downsampled_cloud[i][2])) > z_floor):

                    if (math.sqrt(x_point_cl*x_point_cl+y_point_cl*y_point_cl)>min_body_radius):
                        objects_cloud.append(downsampled_cloud[i])
        

        

        print(len(objects_cloud))
        return objects_cloud

    # --------------------------------------------------------------------------
    # Euclidean / DBSCAN clustering
    # --------------------------------------------------------------------------
    def db_scan(self, cloud, tolerance, min_size, max_size, debug=False):
        curr_time = datetime.now()

        tree = cloud.make_kdtree()
        extraction_object = cloud.make_EuclideanClusterExtraction()
        extraction_object.set_ClusterTolerance(tolerance)
        extraction_object.set_MinClusterSize(min_size)
        extraction_object.set_MaxClusterSize(max_size)
        extraction_object.set_SearchMethod(tree)
        cluster_indices = extraction_object.Extract()

        clusters = []
        points = cloud.to_array()

        for indices in cluster_indices:
            print(f"points are f{points[indices][:,:]}")
            cluster_points = points[indices][:, 0:2]  # take x,y only
            clusters.append(cluster_points)

        if debug:
            print("There are a total number of:", len(clusters), "clusters")
            print(clusters)

        numcluster = Twist()
        numcluster.linear.x = len(clusters)
        self.num_clusters_pub.publish(numcluster)

        time_interval = datetime.now() - curr_time
        print("DBSCAN time:", time_interval)

        return cluster_indices, clusters

    # --------------------------------------------------------------------------
    # Bounding-box / circle wrapping
    # --------------------------------------------------------------------------
    def bounding_box(self, cloud, clusters):
        box_curr_time = datetime.now()
        
        obj_array = PoseArray()

        for cluster in clusters:
            cluster_points_x = cluster[:, 0]
            cluster_points_y = cluster[:, 1]

            min_x, max_x = cluster_points_x.min(), cluster_points_x.max()
            min_y, max_y = cluster_points_y.min(), cluster_points_y.max()

            width = max_x - min_x
            length = max_y - min_y
            centroid_x = (max_x + min_x) / 2
            centroid_y = (max_y + min_y) / 2

            # radius from centroid to farthest corner (scaled 0.9)
            radius = 0.9 * math.hypot(max_x - centroid_x, max_y - centroid_y)

            wrapped_pose = Pose()
            wrapped_pose.position.x = centroid_x
            wrapped_pose.position.y = centroid_y
            wrapped_pose.position.z = radius
            obj_array.poses.append(wrapped_pose)

        self.wrapped_obj_pub.publish(obj_array)

        box_time_interval = datetime.now() - box_curr_time
        full_time_interval = datetime.now() - self.full_timer
        print("Wrapping time:", box_time_interval)
        print("Full callback time:", full_time_interval)

    # --------------------------------------------------------------------------
    # Helpers
    # --------------------------------------------------------------------------
    @staticmethod
    def get_colored_clusters(clusters, cloud):
        number_of_clusters = len(clusters)
        colors = get_color_list(number_of_clusters)

        colored_points = []
        for cluster_id, cluster in enumerate(clusters):
            for i in cluster:
                x, y, z = cloud[i][0], cloud[i][1], cloud[i][2]
                color = rgb_to_float(colors[cluster_id])
                colored_points.append([x, y, z, color])
        return colored_points

    @staticmethod
    def pointcloud_to_pointcloud2(pointcloud_msg):
        header = pointcloud_msg.header
        fields = [
            PointField('x', 0, PointField.FLOAT32, 1),
            PointField('y', 4, PointField.FLOAT32, 1),
            PointField('z', 8, PointField.FLOAT32, 1),
            PointField('rgb', 12, PointField.FLOAT32, 1),
        ]

        points = []
        for point in pointcloud_msg.points:
            x, y, z = point.x, point.y, point.z
            r, g, b = 255, 255, 255
            rgb = (int(r) << 16) | (int(g) << 8) | int(b)
            rgb_float = struct.unpack('f', struct.pack('I', rgb))[0]
            points.append([x, y, z, rgb_float])

        return point_cloud2.create_cloud(header, fields, points)

    # --------------------------------------------------------------------------
    # Main callback
    # --------------------------------------------------------------------------
    def pcl_callback(self, pcl_msg):
        self.full_timer = datetime.now()
        print("entered pcl_callback")

        cluster_indices = self.cached_cluster_indices
        clusters        = self.cached_clusters
        

        #pcl2_msg = self.pointcloud_to_pointcloud2(pcl_msg)
        

        cloud = ros_to_pcl(pcl_msg)
        frame_id = pcl_msg.header.frame_id

        print("Initial cloud size:", cloud.size)

        objects_cloud = self.filtering(cloud)
        colorless_cloud = XYZRGB_to_XYZ(objects_cloud)
        #full_points     = cloud.to_array()
        filtered_array = np.array(objects_cloud)


        next_time = self.init_time + timedelta(seconds=time_delta)
        current_time = datetime.now()

        
        #clusters = []
        #cluster_indices = []


        
        if current_time >= next_time:
            cluster_indices, clusters = self.db_scan(
                colorless_cloud,
                tolerance=0.05,
                min_size=10,
                max_size=1500,
                debug=True
            )

            colored_points = self.get_colored_clusters(cluster_indices, filtered_array)

            
            
            self.cached_cluster_indices = cluster_indices
            self.cached_clusters = clusters
            self.cached_colored_points = colored_points

            # cloud_rgb = pcl.PointCloud_PointXYZRGB()
            # cloud_rgb.from_list(colored_points)
            # filtered_msg = pcl_to_ros(cloud_rgb, frame_id)
            # self.filtered_pub.publish(filtered_msg)

            header = pcl_msg.header
            fields = [
            PointField('x', 0, PointField.FLOAT32, 1),
            PointField('y', 4, PointField.FLOAT32, 1),
            PointField('z', 8, PointField.FLOAT32, 1),
            PointField('rgb', 12, PointField.FLOAT32, 1),
                ]
            # use your colored_points list directly
            filtered_msg = point_cloud2.create_cloud(header, fields, colored_points)
            self.filtered_pub.publish(filtered_msg)



            self.bounding_box(cloud, clusters)
            self.init_time = datetime.now()
            

            

        
        #full_points = cloud.to_array()
        #colored_points = self.get_colored_clusters(cluster_indices, full_points)

        #colored_points = self.get_colored_clusters(cluster_indices, colorless_cloud)
        clusters_cloud = pcl.PointCloud_PointXYZRGB()
        clusters_cloud.from_list(self.cached_colored_points)
        clusters_msg = pcl_to_ros(clusters_cloud, frame_id)
        self.clusters_publisher.publish(clusters_msg)


# --------------------------------------------------------------------------
# Main
# --------------------------------------------------------------------------
if __name__ == '__main__':
    print("new callback run --------------------------------------------------------------")
    detected_objects = Clustering_Shaping()
    rospy.spin()
